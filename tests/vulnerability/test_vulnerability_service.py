import pytest
from exceptions.invalid_field_exception import InvalidFieldException

def test_invalid_cloud_region_field(vulnerability_mock, vulnerability_service_mock):
    vulnerability_mock.cloud_region = "wrong-region"

    with pytest.raises(InvalidFieldException) as exception:
        vulnerability_service_mock.insert(vulnerability_mock)

    assert str(exception.value) == "invalid field: cloud_region"

def test_invalid_created_at_field(vulnerability_mock, vulnerability_service_mock):
    vulnerability_mock.created_at = "wrong-date",

    with pytest.raises(InvalidFieldException) as exception:
        vulnerability_service_mock.insert(vulnerability_mock)

    assert str(exception.value) == "invalid field: created_at"

def test_invalid_updated_at_field(vulnerability_mock, vulnerability_service_mock):
    vulnerability_mock.updated_at = "wrong-date"

    with pytest.raises(InvalidFieldException) as exception:
        vulnerability_service_mock.insert(vulnerability_mock)

    assert str(exception.value) == "invalid field: updated_at"

def test_invalid_is_policy_violation_field(vulnerability_mock, vulnerability_service_mock):
    vulnerability_mock.is_policy_violation = "not-boolean-value"

    with pytest.raises(InvalidFieldException) as exception:
        vulnerability_service_mock.insert(vulnerability_mock)

    assert str(exception.value) == "invalid field: is_policy_violation"

def test_invalid_timestamp_field(vulnerability_mock, vulnerability_service_mock):
    vulnerability_mock.timestamp = "wrong-date"

    with pytest.raises(InvalidFieldException) as exception:
        vulnerability_service_mock.insert(vulnerability_mock)

    assert str(exception.value) == "invalid field: timestamp"
