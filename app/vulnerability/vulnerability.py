import json
from app.validators.is_empty import is_empty
from exceptions.required_field_exception import RequiredFieldException
from interfaces.model import Model

class Vulnerability(Model):
    def __init__(self,
        uid = None,
        source = None,
        environment = None,
        short_description = None,
        long_description = None,
        created_at = None,
        updated_at = None,
        severity = None,
        is_policy_violation = None,
        cve = None,
        cve_category = None,
        cvss = None,
        owasp = None,
        cloud_region = None,
        timestamp = None
    ):
        self.uid = uid
        self.source = source
        self.environment = environment
        self.short_description = short_description
        self.long_description = long_description
        self.created_at = created_at
        self.updated_at = updated_at
        self.severity = severity
        self.is_policy_violation = is_policy_violation
        self.cve = cve
        self.cve_category = cve_category
        self.cvss = cvss
        self.owasp = owasp
        self.cloud_region = cloud_region
        self.timestamp = timestamp

    @property
    def uid(self):
        return self.__uid

    @uid.setter
    def uid(self, uid):
        if is_empty(uid):
            raise RequiredFieldException("uid")

        self.__uid = uid

    @property
    def source(self):
        return self.__source

    @source.setter
    def source(self, source):
        if is_empty(source):
            raise RequiredFieldException("source")

        self.__source = source

    @property
    def environment(self):
        return self.__environment

    @environment.setter
    def environment(self, environment):
        if is_empty(environment):
            raise RequiredFieldException("environment")

        self.__environment = environment

    @property
    def short_description(self):
        return self.__short_description

    @short_description.setter
    def short_description(self, short_description):
        if is_empty(short_description):
            raise RequiredFieldException("short_description")

        self.__short_description = short_description

    @property
    def long_description(self):
        return self.__long_description

    @long_description.setter
    def long_description(self, long_description):
        if is_empty(long_description):
            raise RequiredFieldException("long_description")

        self.__long_description = long_description

    @property
    def created_at(self):
        return self.__created_at

    @created_at.setter
    def created_at(self, created_at):
        if is_empty(created_at):
            raise RequiredFieldException("created_at")

        self.__created_at = created_at[:19]

    @property
    def updated_at(self):
        return self.__updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        if is_empty(updated_at):
            raise RequiredFieldException("updated_at")

        self.__updated_at = updated_at[:19]

    @property
    def severity(self):
        return self.__severity

    @severity.setter
    def severity(self, severity):
        if is_empty(severity):
            raise RequiredFieldException("severity")

        self.__severity = severity

    @property
    def cve(self):
        return self.__cve

    @cve.setter
    def cve(self, cve):
        self.__cve = cve

    @property
    def cve_category(self):
        return self.__cve_category

    @cve_category.setter
    def cve_category(self, cve_category):
        self.__cve_category = cve_category

    @property
    def cvss(self):
        return self.__cvss

    @cvss.setter
    def cvss(self, cvss):
        self.__cvss = cvss

    @property
    def owasp(self):
        return self.__owasp

    @owasp.setter
    def owasp(self, owasp):
        self.__owasp = owasp

    @property
    def cloud_region(self):
        return self.__cloud_region

    @cloud_region.setter
    def cloud_region(self, cloud_region):
        self.__cloud_region = cloud_region

    @property
    def timestamp(self):
        return self.__timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        self.__timestamp = timestamp[:19] if timestamp is not None else None

    @staticmethod
    def from_json(vulnerability_json):
        return Vulnerability(
            uid = vulnerability_json["uid"] if "uid" in vulnerability_json else None,
            source = vulnerability_json["source"] if "source" in vulnerability_json else None,
            environment = vulnerability_json["environment"] if "environment" in vulnerability_json else None,
            short_description = vulnerability_json["short_description"] if "short_description" in vulnerability_json else None,
            long_description = vulnerability_json["long_description"] if "long_description" in vulnerability_json else None,
            created_at = vulnerability_json["created_at"] if "created_at" in vulnerability_json else None,
            updated_at = vulnerability_json["updated_at"] if "updated_at" in vulnerability_json else None,
            severity = vulnerability_json["severity"] if "severity" in vulnerability_json else None,
            cve = vulnerability_json["cve"] if "cve" in vulnerability_json else None,
            cve_category = vulnerability_json["cve_category"] if "cve_category" in vulnerability_json else None,
            cvss = vulnerability_json["cvss"] if "cvss" in vulnerability_json else None,
            owasp = vulnerability_json["owasp"] if "owasp" in vulnerability_json else None,
            cloud_region = vulnerability_json["cloud_region"] if "cloud_region" in vulnerability_json else None,
            timestamp = vulnerability_json["timestamp"] if "timestamp" in vulnerability_json else None,
        )

    @staticmethod
    def from_json_string(vulnerability_json_string):
        return Vulnerability.from_json(json.loads(vulnerability_json_string))

    def to_json(self):
        json = {
            "uid": self.uid,
            "source": self.source,
            "environment": self.environment,
            "short_description": self.short_description,
            "long_description": self.long_description,
            "created_at": self.created_at,
            "updated_at": self.updated_at,
            "severity": self.severity,
        }

        if self.cve is not None:
            json["cve"] = self.cve

        if self.cve_category is not None:
            json["cve_category"] = self.cve_category

        if self.cvss is not None:
            json["cvss"] = self.cvss

        if self.owasp is not None:
            json["owasp"] = self.owasp

        if self.cloud_region is not None:
            json["cloud_region"] = self.cloud_region

        if self.timestamp is not None:
            json["timestamp"] = self.timestamp

        return json
