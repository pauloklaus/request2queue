from logging import Logger

from app.validators.is_aws_region_valid import is_aws_region_valid
from app.validators.is_datetime_valid import is_datetime_valid
from app.vulnerability.vulnerability_repository import VulnerabilityRepository
from exceptions.invalid_field_exception import InvalidFieldException
from vulnerability.vulnerability import Vulnerability

class VulnerabilityService:
    def __init__(self, repository: VulnerabilityRepository, logger: Logger):
        self._repository = repository
        self._logger = logger

    def __validate_fields(self, vulnerability: Vulnerability):
        if (vulnerability.created_at is not None
        and not is_datetime_valid(vulnerability.created_at)):
            self._logger.error(f"[VulnerabilityService] invalid 'created_at' value: {vulnerability.created_at}")
            raise InvalidFieldException("created_at")

        if (vulnerability.updated_at is not None
        and not is_datetime_valid(vulnerability.updated_at)):
            self._logger.error(f"[VulnerabilityService] invalid 'updated_at' value: {vulnerability.updated_at}")
            raise InvalidFieldException("updated_at")

        if (vulnerability.is_policy_violation is not None
        and not isinstance(vulnerability.is_policy_violation, bool)):
            self._logger.error(f"[VulnerabilityService] invalid 'is_policy_violation' value: {vulnerability.is_policy_violation}")
            raise InvalidFieldException("is_policy_violation")

        if (vulnerability.cloud_region is not None
        and not is_aws_region_valid(vulnerability.cloud_region)):
            self._logger.error(f"[VulnerabilityService] invalid 'cloud_region' value: {vulnerability.cloud_region}")
            raise InvalidFieldException("cloud_region")

        if (vulnerability.timestamp is not None
        and not is_datetime_valid(vulnerability.timestamp)):
            self._logger.error(f"[VulnerabilityService] invalid 'timestamp' value: {vulnerability.timestamp}")
            raise InvalidFieldException("timestamp")

    def insert(self, vulnerability: Vulnerability):
        self.__validate_fields(vulnerability)

        return self._repository.insert(vulnerability)
